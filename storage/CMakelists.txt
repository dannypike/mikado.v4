# Copyright (c) 2024 Gamaliel Ltd
#
# Globber reads a list of file globs from stdin and outputs matching file names to stdout
# It continues to monitor the globs for changes and outputs more files accordingly
#
# Each output is sent as a JSON object:
#
# {
#   "file": "filename",
#   "action": "add" | "remove" | "update"
# }
#
# 3.16 is required for target_precompile_headers(...PRECOMPILE_HEADERS_REUSE_FROM...)
# 3.25 is required for CMAKE_C_COMPILE_OPTIONS_MSVC_DEBUG_INFORMATION_FORMAT
cmake_minimum_required (VERSION 3.25)
set(CMAKE_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/../cmake)
set(COMMON_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/../common)
set(API_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/../windowsApi)
set(LIB_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/../lib)

include(${CMAKE_FOLDER}/header.cmake)

set(PROJECT_NAME Storage)
set(TARGET storage)

set(SRC_FILES
   "src/storage.cpp"
)

add_executable(${TARGET} ${SRC_FILES})

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../bin)
set_target_properties(${TARGET} PROPERTIES OUTPUT_NAME ${TARGET})
set_property(TARGET ${TARGET} PROPERTY CXX_STANDARD 20)	# std::jthread requires C++20

target_include_directories(${TARGET} PUBLIC
   ${COMMON_FOLDER}/include
   ${API_FOLDER}/include
   ${CMAKE_CURRENT_SOURCE_DIR}/include
)
target_link_libraries(${TARGET} PRIVATE
   ${LIB_FOLDER}/windowsApi.lib
   ${LIB_FOLDER}/common.lib
)

target_precompile_headers(${TARGET} PRIVATE
   # Standard Library
   <cassert>
   <filesystem>
   <source_location>
   <string>
	<thread>

   # Windows API
   <windows.h>

   # Database
   <sqlite3.h>

   # Boost
   <boost/algorithm/string/predicate.hpp>
   <boost/date_time/posix_time/posix_time.hpp>
   <boost/iostreams/concepts.hpp>
   <boost/iostreams/stream_buffer.hpp>
   <boost/json.hpp>
	<boost/lockfree/spsc_queue.hpp>
   <boost/program_options.hpp>
   <boost/tuple/tuple.hpp>
)

find_package(Boost REQUIRED COMPONENTS date_time json program_options)
target_include_directories(${TARGET} PRIVATE ${Boost_INCLUDE_DIRS})
target_link_libraries(${TARGET} PRIVATE ${Boost_LIBRARIES})

find_package(unofficial-sqlite3 CONFIG REQUIRED)
target_link_libraries(${TARGET} PRIVATE unofficial::sqlite3::sqlite3)

include(${CMAKE_FOLDER}/footer.cmake)
